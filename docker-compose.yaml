networks:
  app-network:
    driver: bridge
version: "3"
services:
  ###############################################################
  ############ Keycloak / User Management Service ###############
  ###############################################################
  kcx_db:
    image: postgres:${KCX_DB_POSTGRES_VERSION}
    container_name: kcx_db
    volumes:
      - "/DATA/kcx_db_data:/var/lib/postgresql/data"
      - /etc/timezone:/etc/timezone:ro
    environment:
      POSTGRES_DB: ${KCX_DB_ENV_POSTGRES_DB}
      POSTGRES_USER: ${KCX_DB_ENV_POSTGRES_USER}
      POSTGRES_PASSWORD: ${KCX_DB_ENV_POSTGRES_PASSWORD}
      TZ: "Africa/Algiers"
    ports:
      - "${KCX_DB_POSTGRES_PORT}:5432"
    networks:
      app-network:
        aliases:
          - kcx_db
  kcx:
    build:
      context: keycloak
      dockerfile: Dockerfile
      args:
        KCX_VERSION: ${KCX_VERSION}
    image: keycloak
    container_name: kcx
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
    environment:
      KC_DB: postgres
      KC_DB_URL: "jdbc:postgresql://kcx_db:5432/${KCX_DB_ENV_POSTGRES_DB}"
      KC_DB_DATABASE: ${KCX_DB_ENV_POSTGRES_DB}
      KC_DB_USERNAME: ${KCX_DB_ENV_POSTGRES_USER}
      KC_DB_PASSWORD: ${KCX_DB_ENV_POSTGRES_PASSWORD}
      KC_HOSTNAME: kcx:8080
      KC_HTTP_RELATIVE_PATH: auth
      QUARKUS_PROFILE: prod
      JAVA_OPTS_APPEND: "-Duser.timezone=gmt+1 -Xms1024m -Xmx2048m -Djava.net.preferIPv4Stack=true"
    ports:
      - "${KCX_PORT}:8080"
    networks:
      app-network:
        aliases:
          - kcx
    depends_on:
      - kcx_db
  kcx_init:
    build:
      context: keycloak/keycloak_init
      dockerfile: Dockerfile
      args:
        KCX_VERSION: ${KCX_VERSION}
    image: kcx_init
    container_name: kcx_init
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
    environment:
      KC_DB: postgres
      KC_DB_URL: "jdbc:postgresql://kcx_db:5432/${KCX_DB_ENV_POSTGRES_DB}"
      KC_DB_DATABASE: ${KCX_DB_ENV_POSTGRES_DB}
      KC_DB_USERNAME: ${KCX_DB_ENV_POSTGRES_USER}
      KC_DB_PASSWORD: ${KCX_DB_ENV_POSTGRES_PASSWORD}
      KC_HOSTNAME: kcx:8080
      KC_HTTP_RELATIVE_PATH: auth
      QUARKUS_PROFILE: prod
      JAVA_OPTS_APPEND: "-Duser.timezone=gmt+1 -Xms1024m -Xmx2048m -Djava.net.preferIPv4Stack=true"
    networks:
      app-network:
        aliases:
          - kcx_init
    depends_on:
      - kcx
  ###############################################################
  ############ Images Service ###################################
  ###############################################################
  images:
    build:
      context: images
      dockerfile: Dockerfile
    image: images
    container_name: images
    volumes:
      - "/DATA/images_store:/var/www/data"
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
    restart: unless-stopped
    environment:
      MAX_UPLOAD_SIZE: 1024
      URL: "http://${PUBLIC_SERV_ADDR}:${KRAKEND_PORT}/images/"
    tty: true
    ports:
      - "${IMAGES_PORT}:80"
    networks:
      app-network:
        aliases:
          - images
  #####################################################
  ############ Superset / Stats Service ###############
  #####################################################
  superset_redis:
    image: redis:latest
    container_name: superset_redis
    restart: unless-stopped
    volumes:
      - "/DATA/superset/superset_redis_data:/data"
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
    networks:
      app-network:
        aliases:
          - superset_redis
  superset_db:
    image: postgres:${SUPERSET_DB_POSTGRES_VERSION}
    container_name: superset_db
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${SUPERSET_DB_ENV_POSTGRES_DATABASE}
      POSTGRES_USER: ${SUPERSET_DB_ENV_POSTGRES_USER}
      POSTGRES_PASSWORD: ${SUPERSET_DB_ENV_POSTGRES_PASSWORD}
      TZ: "Africa/Algiers"
    ports:
      - "${SUPERSET_DB_POSTGRES_PORT}:5432"
    volumes:
      - "/DATA/superset/superset_db_data:/var/lib/postgresql/data"
    networks:
      app-network:
        aliases:
          - superset_db
  superset:
    build:
      context: superset
      dockerfile: Dockerfile
      args:
        SUPERSET_VERSION: ${SUPERSET_VERSION}
    image: superset
    env_file: .env
    container_name: superset
    command: ["/app/docker/docker-bootstrap.sh", "app-gunicorn"]
    user: "root"
    restart: unless-stopped
    ports:
      - ${SUPERSET_PORT_EXTERN}:8088
    depends_on:
      - superset_db
      - superset_redis
      - superset_init
    volumes:
      - "/DATA/superset/superset_data:/app/superset_home"
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
    networks:
      app-network:
        aliases:
          - superset
  superset_worker:
    build:
      context: superset
      dockerfile: Dockerfile
      args:
        SUPERSET_VERSION: ${SUPERSET_VERSION}
    image: superset
    env_file: .env
    container_name: superset_worker
    command: ["/app/docker/docker-bootstrap.sh", "worker"]
    restart: unless-stopped
    depends_on:
      - superset
    user: "root"
    volumes:
      - "/DATA/superset/superset_data:/app/superset_home"
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
    networks:
      app-network:
        aliases:
          - superset_worker
  superset_worker_beat:
    build:
      context: superset
      dockerfile: Dockerfile
      args:
        SUPERSET_VERSION: ${SUPERSET_VERSION}
    image: superset
    container_name: superset_worker_beat
    command: ["/app/docker/docker-bootstrap.sh", "beat"]
    restart: unless-stopped
    depends_on:
      - superset_worker
    user: "root"
    volumes:
      - "/DATA/superset/superset_data:/app/superset_home"
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
    networks:
      app-network:
        aliases:
          - superset_worker_beat
  superset_init:
    build:
      context: superset
      dockerfile: Dockerfile
      args:
        SUPERSET_VERSION: ${SUPERSET_VERSION}
    image: superset
    env_file: .env
    container_name: superset_init
    command: ["/app/docker/docker-init.sh"]
    depends_on:
      - superset_db
    user: "root"
    volumes:
      - "/DATA/superset/superset_data:/app/superset_home"
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
    networks:
      app-network:
        aliases:
          - superset_init
  ###############################################################
  ############ Core Service #####################################
  ###############################################################
  core_db:
    image: mariadb:${CORE_DB_MARIADB_VERSION}
    container_name: core_db
    restart: unless-stopped
    tty: true
    ports:
      - "${CORE_DB_MARIADB_PORT}:3306"
    volumes:
      - "/DATA/core_db_data:/var/lib/mysql"
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
    environment:
      MARIADB_ROOT_PASSWORD: ${CORE_DB_ENV_MARIADB_ROOT_PASSWORD}
      MARIADB_DATABASE: ${CORE_DB_ENV_MARIADB_DATABASE}
      MARIADB_USER: ${CORE_DB_ENV_MARIADB_USER}
      MARIADB_PASSWORD: ${CORE_DB_ENV_MARIADB_PASSWORD}
      TZ: "Africa/Algiers"
    networks:
      app-network:
        aliases:
          - core_db
  core:
    build:
      context: core
      dockerfile: Dockerfile
    image: core
    container_name: core
    environment:
      CORE_DB_MARIADB_PORT: ${CORE_DB_MARIADB_PORT}
      CORE_DB_ENV_MARIADB_DATABASE: ${CORE_DB_ENV_MARIADB_DATABASE}
      CORE_DB_ENV_MARIADB_USER: ${CORE_DB_ENV_MARIADB_USER}
      CORE_DB_ENV_MARIADB_PASSWORD: ${CORE_DB_ENV_MARIADB_PASSWORD}
    ports:
      - "${CORE_PORT}:80"
    volumes:
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
    networks:
      app-network:
        aliases:
          - core
    depends_on:
      - core_db
      - kcx_init
      - superset_init
  core_init:
    build:
      context: core
      dockerfile: Dockerfile
    image: core
    container_name: core_init
    volumes:
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
    environment:
      CORE_DB_MARIADB_PORT: ${CORE_DB_MARIADB_PORT}
      CORE_DB_ENV_MARIADB_DATABASE: ${CORE_DB_ENV_MARIADB_DATABASE}
      CORE_DB_ENV_MARIADB_USER: ${CORE_DB_ENV_MARIADB_USER}
      CORE_DB_ENV_MARIADB_PASSWORD: ${CORE_DB_ENV_MARIADB_PASSWORD}
    command: [ "/docker-init.sh" ]
    networks:
      app-network:
        aliases:
          - core_init
    depends_on:
      - core_db
  ###############################################################
  ############ Krakend Service ##################################
  ###############################################################
  krakend:
    build:
      context: krakend
      dockerfile: Dockerfile
      args:
        KRAKEND_VERSION: ${KRAKEND_VERSION}
    image: krakend
    container_name: krakend
    ports:
      - "${KRAKEND_PORT}:8080"
    environment:
      FC_ENABLE: 1
      FC_SETTINGS: /etc/krakend/config/settings
      FC_TEMPLATES: /etc/krakend/config/templates
      KCX_ENV_CORE_CLIENT_ID: ${KCX_ENV_CORE_CLIENT_ID}
      KCX_ENV_CORE_CLIENT_SECRET: ${KCX_ENV_CORE_CLIENT_SECRET}
    restart: unless-stopped
    volumes:
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
    tty: true
    networks:
      app-network:
        aliases:
          - krakend
    depends_on:
      - core
      - images
      - superset_worker_beat
  ###############################################################
  ############ Dashboard ########################################
  ###############################################################
  dashboard:
    build:
      context: dashboard
      dockerfile: Dockerfile
      args:
        BASE_URL: "http://${PUBLIC_SERV_ADDR}:${KRAKEND_PORT}"
    image: dashboard
    container_name: dashboard
    volumes:
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
    ports:
      - ${DASHBOARD_PORT}:80
    tty: true
    networks:
      app-network:
        aliases:
          - dashboard
    depends_on:
      - krakend